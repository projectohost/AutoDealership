// –î–∞–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
const cars = [
    {
        id: 1,
        name: "BMW M5 Competition",
        category: "sedan",
        year: 2023,
        engine: "4.4L V8",
        power: "625 –∫.—Å.",
        transmission: "–ê–≤—Ç–æ–º–∞—Ç",
        price: "3 250 000 ‚Ç¥",
        image: "https://images.unsplash.com/photo-1555215695-3004980ad54e?w=400&h=250&fit=crop&auto=format"
    },
    {
        id: 2,
        name: "Mercedes-AMG G63",
        category: "suv",
        year: 2024,
        engine: "4.0L V8",
        power: "585 –∫.—Å.",
        transmission: "–ê–≤—Ç–æ–º–∞—Ç",
        price: "4 920 000 ‚Ç¥",
        image: "https://images.unsplash.com/photo-1581540222194-0def2dda95b8?w=400&h=250&fit=crop&auto=format"
    },
    {
        id: 3,
        name: "Porsche 911 Turbo S",
        category: "coupe",
        year: 2023,
        engine: "3.8L Twin-Turbo",
        power: "650 –∫.—Å.",
        transmission: "PDK",
        price: "5 750 000 ‚Ç¥",
        image: "https://images.unsplash.com/photo-1544829099-b9a0c5303bea?w=400&h=250&fit=crop&auto=format"
    },
    {
        id: 4,
        name: "Audi RS6 Avant",
        category: "hatchback",
        year: 2024,
        engine: "4.0L V8",
        power: "600 –∫.—Å.",
        transmission: "Tiptronic",
        price: "3 070 000 ‚Ç¥",
        image: "https://images.unsplash.com/photo-1606664515524-ed2f786a0bd6?w=400&h=250&fit=crop&auto=format"
    },
    {
        id: 5,
        name: "Mercedes-AMG S63",
        category: "sedan",
        year: 2023,
        engine: "4.0L V8",
        power: "630 –∫.—Å.",
        transmission: "–ê–≤—Ç–æ–º–∞—Ç",
        price: "4 220 000 ‚Ç¥",
        image: "https://images.unsplash.com/photo-1618843479313-40f8afb4b4d8?w=400&h=250&fit=crop&auto=format"
    },
    {
        id: 6,
        name: "Range Rover Sport SVR",
        category: "suv",
        year: 2024,
        engine: "5.0L V8",
        power: "575 –∫.—Å.",
        transmission: "–ê–≤—Ç–æ–º–∞—Ç",
        price: "3 570 000 ‚Ç¥",
        image: "https://images.unsplash.com/photo-1494905998402-395d579af36f?w=400&h=250&fit=crop&auto=format"
    },
    {
        id: 7,
        name: "Ferrari F8 Tributo",
        category: "coupe",
        year: 2023,
        engine: "3.9L V8",
        power: "720 –∫.—Å.",
        transmission: "F1",
        price: "7 420 000 ‚Ç¥",
        image: "https://images.unsplash.com/photo-1592198084033-aade902d1aae?w=400&h=250&fit=crop&auto=format"
    },
    {
        id: 8,
        name: "Audi RS3 Sportback",
        category: "hatchback",
        year: 2024,
        engine: "2.5L I5",
        power: "400 –∫.—Å.",
        transmission: "S tronic",
        price: "1 770 000 ‚Ç¥",
        image: "https://images.unsplash.com/photo-1606016159991-7e5d0b68b9be?w=400&h=250&fit=crop&auto=format"
    },
    {
        id: 9,
        name: "Lamborghini Hurac√°n",
        category: "coupe",
        year: 2024,
        engine: "5.2L V10",
        power: "640 –∫.—Å.",
        transmission: "–ê–≤—Ç–æ–º–∞—Ç",
        price: "6 890 000 ‚Ç¥",
        image: "https://images.unsplash.com/photo-1544636331-e26879cd4d9b?w=400&h=250&fit=crop&auto=format"
    },
    {
        id: 10,
        name: "Bentley Bentayga",
        category: "suv",
        year: 2023,
        engine: "4.0L V8",
        power: "550 –∫.—Å.",
        transmission: "–ê–≤—Ç–æ–º–∞—Ç",
        price: "5 120 000 ‚Ç¥",
        image: "https://images.unsplash.com/photo-1449824913935-59a10b8d2000?w=400&h=250&fit=crop&auto=format"
    }
];

let filteredCars = [...cars];

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
function renderCars(carsToRender) {
    const grid = document.getElementById('carsGrid');
    
    if (carsToRender.length === 0) {
        grid.innerHTML = '<div class="loading">–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>';
        return;
    }

    grid.innerHTML = carsToRender.map(car => `
        <div class="car-card" data-category="${car.category}">
            <div class="car-image">
                <img src="${car.image}" alt="${car.name}" 
                     style="width: 100%; height: 100%; object-fit: cover; border-radius: 0;"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                <div style="display: none; width: 100%; height: 100%; align-items: center; justify-content: center; background: linear-gradient(45deg, #333, #555); font-size: 1.2rem; color: #999;">
                    <span>–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${car.name}</span>
                </div>
            </div>
            <div class="car-info">
                <h3 class="car-name">${car.name}</h3>
                <div class="car-details">
                    <div class="detail">
                        <strong>–†—ñ–∫:</strong> ${car.year}
                    </div>
                    <div class="detail">
                        <strong>–î–≤–∏–≥—É–Ω:</strong> ${car.engine}
                    </div>
                    <div class="detail">
                        <strong>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å:</strong> ${car.power}
                    </div>
                    <div class="detail">
                        <strong>–ö–ü–ü:</strong> ${car.transmission}
                    </div>
                </div>
                <div class="car-price">${car.price}</div>
                <div class="car-actions">
                    <button class="btn btn-primary" onclick="showDetails(${car.id})">
                        –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ
                    </button>
                    <button class="btn btn-secondary" onclick="addToFavorites(${car.id})">
                        –í –æ–±—Ä–∞–Ω–µ
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

// –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
function filterCars(category) {
    const buttons = document.querySelectorAll('.filter-btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    
    const activeBtn = document.querySelector(`[data-category="${category}"]`);
    if (activeBtn) {
        activeBtn.classList.add('active');
    }

    if (category === 'all') {
        filteredCars = [...cars];
    } else {
        filteredCars = cars.filter(car => car.category === category);
    }

    renderCars(filteredCars);
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
function showDetails(carId) {
    const car = cars.find(c => c.id === carId);
    if (car) {
        alert(`–î–µ—Ç–∞–ª—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è: ${car.name}\n\n–†—ñ–∫: ${car.year}\n–î–≤–∏–≥—É–Ω: ${car.engine}\n–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: ${car.power}\n–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á: ${car.transmission}\n\n–¶—ñ–Ω–∞: ${car.price}\n\n–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏!\n\n–¢–µ–ª–µ—Ñ–æ–Ω: +380 (44) 123-45-67\nEmail: info@automax.ua`);
    }
}

// –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ
function addToFavorites(carId) {
    const car = cars.find(c => c.id === carId);
    if (car) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ —î –≤ localStorage
        let favorites = JSON.parse(localStorage.getItem('favorites')) || [];
        
        if (!favorites.some(fav => fav.id === carId)) {
            favorites.push(car);
            localStorage.setItem('favorites', JSON.stringify(favorites));
            alert(`${car.name} –¥–æ–¥–∞–Ω–æ –≤ –æ–±—Ä–∞–Ω–µ! ‚≠ê\n\n–í –æ–±—Ä–∞–Ω–æ–º—É –∑–∞—Ä–∞–∑: ${favorites.length} –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤`);
        } else {
            alert(`${car.name} –≤–∂–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–±—Ä–∞–Ω–æ–º—É! üíñ`);
        }
    }
}

// –ü–æ—à—É–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
function searchCars(searchTerm) {
    const term = searchTerm.toLowerCase();
    filteredCars = cars.filter(car => 
        car.name.toLowerCase().includes(term) ||
        car.engine.toLowerCase().includes(term) ||
        car.year.toString().includes(term)
    );
    renderCars(filteredCars);
}

// –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
function sortCars(sortBy) {
    let sortedCars = [...filteredCars];
    
    switch(sortBy) {
        case 'price-low':
            sortedCars.sort((a, b) => parseFloat(a.price.replace(/[^\d]/g, '')) - parseFloat(b.price.replace(/[^\d]/g, '')));
            break;
        case 'price-high':
            sortedCars.sort((a, b) => parseFloat(b.price.replace(/[^\d]/g, '')) - parseFloat(a.price.replace(/[^\d]/g, '')));
            break;
        case 'year-new':
            sortedCars.sort((a, b) => b.year - a.year);
            break;
        case 'year-old':
            sortedCars.sort((a, b) => a.year - b.year);
            break;
        case 'power':
            sortedCars.sort((a, b) => parseFloat(b.power.replace(/[^\d]/g, '')) - parseFloat(a.power.replace(/[^\d]/g, '')));
            break;
        case 'name':
            sortedCars.sort((a, b) => a.name.localeCompare(b.name));
            break;
    }
    
    renderCars(sortedCars);
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
document.addEventListener('DOMContentLoaded', function() {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ç–∞–ª–æ–≥—É
    setTimeout(() => {
        renderCars(cars);
        updateStats();
    }, 1000);

    // –§—ñ–ª—å—Ç—Ä–∏
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            const category = this.getAttribute('data-category');
            filterCars(category);
            updateStats();
        });
    });
});

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const totalCars = filteredCars.length;
    const avgPrice = filteredCars.reduce((sum, car) => 
        sum + parseFloat(car.price.replace(/[^\d]/g, '')), 0) / totalCars;
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥—É:
    üöó –ü–æ–∫–∞–∑–∞–Ω–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤: ${totalCars}
    üí∞ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: ${Math.round(avgPrice).toLocaleString()} ‚Ç¥
    üèÜ –ù–∞–π–¥–æ—Ä–æ–∂—á–∏–π: ${filteredCars.reduce((max, car) => 
        parseFloat(car.price.replace(/[^\d]/g, '')) > parseFloat(max.price.replace(/[^\d]/g, '')) ? car : max
    ).name}
    üíé –ù–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∏–π: ${filteredCars.reduce((max, car) => 
        parseFloat(car.power.replace(/[^\d]/g, '')) > parseFloat(max.power.replace(/[^\d]/g, '')) ? car : max
    ).name}`);
}

// –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ –∫–∞—Ä—Ç–æ–∫
function animateCards() {
    const cards = document.querySelectorAll('.car-card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(30px)';
        
        setTimeout(() => {
            card.style.transition = 'all 0.5s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 100);
    });
}

// –ó–∞–ø—É—Å–∫ –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
const originalRenderCars = renderCars;
renderCars = function(carsToRender) {
    originalRenderCars(carsToRender);
    setTimeout(animateCards, 100);
};

// –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ (–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è)
function loadMoreCars() {
    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤...');
}

// –ï–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
function exportFavorites() {
    const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
    if (favorites.length === 0) {
        alert('üìù –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!');
        return;
    }
    
    const exportData = {
        export_date: new Date().toLocaleDateString('uk-UA'),
        total_cars: favorites.length,
        cars: favorites
    };
    
    console.log('üìã –ï–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤:', exportData);
    alert(`‚úÖ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${favorites.length} –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤!\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`);
}